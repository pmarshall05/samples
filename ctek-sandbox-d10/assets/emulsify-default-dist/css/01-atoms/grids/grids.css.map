{"version":3,"sources":["webpack:///./components/01-atoms/grids/grids.scss","webpack:///./components/00-base/mixins/_breakpoints.scss"],"names":[],"mappings":"AAEA,QAME,qDACA,kDACA,yBACA,4BACA,0BAEA,UAMA,sBACE,aAGF,qBACE,aACA,oBACA,8DACA,mFACA,iCC6DE,qCDxDJ,gCAGI,0BCqDA,qCDxDJ,gCAOI,0BAIJ,8BACE,yBC4CE,qCD7CJ,8BAII,0BCyCA,qCDrCJ,8BAGI,0BAIJ,4BACE,yBC6BE,qCDxBJ,4BAGI,0BCqBA,qCDjBJ,4BAGI,yBAEA,+BCYA,qCDRJ,4BAGI,yBAEA,+BCGA,qCDCJ,4BAGI,yBAEA,+BCNA,qCDUJ,4BAGI,yBAEA,+BAKJ,qBACE,aACA,eAGA,uCACE,qDACA,gDAGF,qCACE,mDACA,gDChCA,qCDoBJ,qBAgBI,qDACA,kDAGF,mCACE,cACA,wCC1CA,qCD+CA,2DAGI,kDACA,oDACA,iDCpDJ,qCD+CA,2DASI,wDAOJ,yDACE,kDACA,oDACA,gDClEF,qCD+DA,yDAMI,uDACA,oDACA,iDAOJ,uDACE,kDACA,oDACA,gD","file":"css/01-atoms/grids/grids.css","sourcesContent":["@use '../../00-base/init' as *;\n\n.a-grid {\n  /**\n    * @tokens Grid\n    * @presenter Color\n  */\n\n  --ctek-grid-column-gap: var(--ctek-global-space-105);\n  --ctek-grid-row-gap: var(--ctek-global-space-105);\n  --ctek-grid-col-count: 1;\n  --ctek-grid-minwidth: 350px;\n  --ctek-grid-maxwidth: 1fr;\n\n  padding: 0;\n\n  /**\n    * @tokens-end\n  */\n\n  .a-grid__item {\n    display: flex;\n  }\n\n  &.a-grid--grid {\n    display: grid;\n    grid-auto-rows: auto;\n    grid-template-columns: repeat(var(--ctek-grid-col-count), 1fr);\n    column-gap: var(--ctek-grid-column-gap);\n    row-gap: var(--ctek-grid-row-gap);\n  }\n\n  // block grids\n\n  &.a-grid--block--1-2-3-up {\n\n    @include bp(sm) {\n      --ctek-grid-col-count: 2;\n    }\n\n    @include bp(md) {\n      --ctek-grid-col-count: 3;\n    }\n  }\n\n  &.a-grid--block--2-3-up {\n    --ctek-grid-col-count: 2;\n\n    @include bp(md) {\n      --ctek-grid-col-count: 3;\n    }\n  }\n\n  &.a-grid--block--1-2-up {\n\n    @include bp(sm) {\n      --ctek-grid-col-count: 2;\n    }\n  }\n\n  &.a-grid--block--2-up {\n    --ctek-grid-col-count: 2;\n  }\n\n  // Column grids\n\n  &.a-grid--col2--50-50 {\n\n    @include bp(sm) {\n      --ctek-grid-col-count: 2;\n    }\n  }\n\n  &.a-grid--col2--75-25 {\n\n    @include bp(sm) {\n      --ctek-grid-col-count: 2;\n\n      grid-template-columns: 3fr 1fr;\n    }\n  }\n\n  &.a-grid--col2--25-75 {\n\n    @include bp(sm) {\n      --ctek-grid-col-count: 2;\n\n      grid-template-columns: 1fr 3fr;\n    }\n  }\n\n  &.a-grid--col2--60-40 {\n\n    @include bp(sm) {\n      --ctek-grid-col-count: 2;\n\n      grid-template-columns: 6fr 4fr;\n    }\n  }\n\n  &.a-grid--col2--40-60 {\n\n    @include bp(sm) {\n      --ctek-grid-col-count: 2;\n\n      grid-template-columns: 4fr 6fr;\n    }\n  }\n\n  // Flex grid\n  &.a-grid--flex {\n    display: flex;\n    flex-wrap: wrap;\n\n    // example custom grid gaps\n    &.a-grid--gap-105-3 {\n      --ctek-grid-column-gap: var(--ctek-global-space-105);\n      --ctek-grid-row-gap: var(--ctek-global-space-3);\n    }\n\n    &.a-grid--gap-2-2 {\n      --ctek-grid-column-gap: var(--ctek-global-space-2);\n      --ctek-grid-row-gap: var(--ctek-global-space-2);\n    }\n\n    @include bp(sm) {\n      margin-inline: calc(var(--ctek-grid-column-gap) / 2 * -1);\n      margin-block: calc(var(--ctek-grid-row-gap) / 2 * -1);\n    }\n\n    .a-grid__item {\n      flex: 1 1 auto;\n      padding-bottom: var(--ctek-grid-row-gap);\n    }\n\n    &.a-grid--block--1-2-3-up {\n\n      .a-grid__item {\n\n        @include bp(sm) {\n          width: calc(50% - (var(--ctek-grid-column-gap)) / 2);\n          padding-inline: calc(1 / 2 * var(--ctek-grid-column-gap));\n          padding-block: calc(1 / 2 * var(--ctek-grid-row-gap));\n        }\n\n        @include bp(md) {\n          width: calc(33.3333% - (var(--ctek-grid-column-gap)) / 2);\n        }\n      }\n    }\n\n    &.a-grid--block--2-3-up {\n\n      .a-grid__item {\n        width: calc(50% - (var(--ctek-grid-column-gap)) / 2);\n        padding-inline: calc(1 / 2 * var(--ctek-grid-column-gap));\n        padding-block: calc(1 / 2 * var(--ctek-grid-row-gap));\n\n        @include bp(md) {\n          width: calc(33.3333% - (var(--ctek-grid-column-gap)) / 2);\n          padding-inline: calc(1 / 2 * var(--ctek-grid-column-gap));\n          padding-block: calc(1 / 2 * var(--ctek-grid-row-gap));\n        }\n      }\n    }\n\n    &.a-grid--block--2-up {\n\n      .a-grid__item {\n        width: calc(50% - (var(--ctek-grid-column-gap)) / 2);\n        padding-inline: calc(1 / 2 * var(--ctek-grid-column-gap));\n        padding-block: calc(1 / 2 * var(--ctek-grid-row-gap));\n      }\n    }\n  }\n}\n","/**\n * Global Breakpoints\n *\n * ref: https://rimdev.io/making-media-query-mixins-with-sass/\n *\n * This system has the following features\n * 1. Can create a map of breakpoint variables using any naming scheme\n * 2. Media direction can be specified; default direction is min-width\n * 3. Math is used on max-width directions to subtract 1px from the variable value to prevent breakpoint conflicts\n * 4. Adhoc values can be used and will be passed through directly, no math is done when using max-width.\n *\n * EXAMPLES\n *\n * To create a default min-width mq:\n * @include bp(md) {\n *   color: black;\n * }\n *\n * OUTPUTS:\n * @media (min-width: 992px) {\n *   .link {\n *     color: #000;\n *   }\n * }\n *\n * To create a max-width mq:\n * @include bp(sm, max) {\n *   color: yellow;\n * }\n *\n * OUTPUTS:\n * @media (max-width: 767px) {\n *   .link {\n *     color: #ff0;\n *   }\n * }\n *\n * To create a min-width and max-width mq:\n * @include bp(xs) {\n *   @include bp(md, max) {\n *     color: #bada55;\n *   }\n * }\n *\n * OUTPUTS:\n * @media (min-width: 375px) and (max-width: 991px) {\n *   .link {\n *     color: #bada55;\n *   }\n * }\n *\n * To create an ad-hoc min-width and max-width mq:\n * @include bp(300px) {\n *   @include bp(600px, max) {\n *     color: gray;\n *   }\n * }\n *\n * OUTPUTS:\n * @media (min-width: 300px) and (max-width: 600px) {\n *   .link {\n *     color: gray;\n *   }\n * }\n*/\n\n@use 'sass:map';\n\n$breakpoints: (\n  xs: 375px,\n  sm: 768px,\n  md: 992px,\n  lg: 1200px,\n  xl: 1400px,\n  xxl: 1600px,\n);\n\n@mixin bp($breakpoint, $direction: min) {\n\n  @if map-has-key($breakpoints, $breakpoint) {\n    // Get the breakpoint value.\n    $breakpoint-value: map.get($breakpoints, $breakpoint);\n\n    @if $direction == max {\n\n      @media screen and (max-width: ($breakpoint-value - 1)) {\n        @content;\n      }\n    } @else if $direction == min {\n\n      @media screen and (min-width: $breakpoint-value) {\n        @content;\n      }\n    } @else {\n\n      @media screen and ($direction: $breakpoint-value) {\n        @content;\n      }\n    }\n\n    // If the breakpoint doesn't exist in the map.\n  } @else {\n\n    @if $direction == max {\n\n      @media screen and (max-width: $breakpoint) {\n        @content;\n      }\n    } @else if $direction == min {\n\n      @media screen and (min-width: $breakpoint) {\n        @content;\n      }\n    } @else {\n\n      @media screen and ($direction: $breakpoint) {\n        @content;\n      }\n    }\n  }\n}\n"],"sourceRoot":""}